#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'set'
require 'dns-sniper'

VALID_FORMATS = DNSSniper::Exporters.all.inject([]) { |arr, f| arr << f.name.to_s.sub('DNSSniper::', '').sub('Exporter', '').downcase }
Options = Struct.new(:conf_path, :format)

class Parser
  def self.parse(options)
    args = Options.new('world')
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename(__FILE__)} -f PATH -o FORMAT [options]\n#{File.basename(__FILE__)} combines online DNS blacklists and combines them into the desired configuration FORMAT.\n\n"
      opts.on('-c', '--conf=PATH', 'PATH to YAML configuration file') do |path|
        args.conf_path = path
      end
      opts.on('-o', '--output=FORMAT', "FORMAT to output — one of #{VALID_FORMATS.join(', ')}") do |format|
        args.format = format
      end
      opts.on('-h', '--help', 'Prints this help') do
        puts opts
        exit
      end
    end
    opt_parser.parse!(options)
    args
  end
end

options = Parser.parse ARGV

unless File.exist?(options[:conf_path])
  warn "Error: Unable to access ”#{options[:conf_path]}”"
  exit(-1)
end

exporter = DNSSniper.const_get("#{options[:format].to_s.split('_').map(&:capitalize).join}Exporter")
if !exporter
  warn "Error: Invalid format #{options[:format]}"
  exit(-1)
end

hostnames = DNSSniper::Hostnames.new
hostnames.blacklist += DNSSniper::ConfigurationImporter.new(options[:conf_path], list: :reject).hostnames
hostnames.whitelist += DNSSniper::ConfigurationImporter.new(options[:conf_path], list: :allow).hostnames

exporter = exporter.new(hostnames.blocklist)
puts exporter.data